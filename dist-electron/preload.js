"use strict";
const electron = require("electron");
const electronAPI = {
  // Prompts
  getAllPrompts: () => electron.ipcRenderer.invoke("get-all-prompts"),
  getPrompt: (id) => electron.ipcRenderer.invoke("get-prompt", id),
  createPrompt: (data) => electron.ipcRenderer.invoke("create-prompt", data),
  updatePrompt: (id, data) => electron.ipcRenderer.invoke("update-prompt", id, data),
  deletePrompt: (id) => electron.ipcRenderer.invoke("delete-prompt", id),
  searchPrompts: (query) => electron.ipcRenderer.invoke("search-prompts", query),
  getPromptsByTag: (tag) => electron.ipcRenderer.invoke("get-prompts-by-tag", tag),
  // Categories
  getAllCategories: () => electron.ipcRenderer.invoke("get-all-categories"),
  createCategory: (data) => electron.ipcRenderer.invoke("create-category", data),
  updateCategory: (id, data) => electron.ipcRenderer.invoke("update-category", id, data),
  deleteCategory: (id) => electron.ipcRenderer.invoke("delete-category", id),
  // Templates
  getAllTemplates: () => electron.ipcRenderer.invoke("get-all-templates"),
  createTemplate: (data) => electron.ipcRenderer.invoke("create-template", data),
  updateTemplate: (id, data) => electron.ipcRenderer.invoke("update-template", id, data),
  deleteTemplate: (id) => electron.ipcRenderer.invoke("delete-template", id),
  generateFromTemplate: (templateId, variables) => electron.ipcRenderer.invoke("generate-from-template", templateId, variables),
  // Tags
  getAllTags: () => electron.ipcRenderer.invoke("get-all-tags"),
  // Versions
  getPromptVersions: (promptId) => electron.ipcRenderer.invoke("get-prompt-versions", promptId),
  createPromptVersion: (promptId, content) => electron.ipcRenderer.invoke("create-prompt-version", promptId, content),
  // Settings
  getSetting: (key) => electron.ipcRenderer.invoke("get-setting", key),
  setSetting: (key, value) => electron.ipcRenderer.invoke("set-setting", key, value),
  // Import/Export
  exportPrompts: (format) => electron.ipcRenderer.invoke("export-prompts", format),
  importPrompts: () => electron.ipcRenderer.invoke("import-prompts"),
  // Testing
  testPrompt: (request) => electron.ipcRenderer.invoke("test-prompt", request),
  // System
  copyToClipboard: (text) => electron.ipcRenderer.invoke("copy-to-clipboard", text),
  switchMode: (mode) => electron.ipcRenderer.invoke("switch-mode", mode),
  getCurrentMode: () => electron.ipcRenderer.invoke("get-current-mode"),
  factoryReset: () => electron.ipcRenderer.invoke("factory-reset"),
  // MCP Server
  startMcpServer: (config, exposedPrompts) => electron.ipcRenderer.invoke("mcp-server:start", config, exposedPrompts),
  stopMcpServer: () => electron.ipcRenderer.invoke("mcp-server:stop"),
  getMcpServerStatus: () => electron.ipcRenderer.invoke("mcp-server:status"),
  updateMcpServerConfig: (config) => electron.ipcRenderer.invoke("mcp-server:update-config", config),
  updateMcpServerExposedPrompts: (exposedPrompts) => electron.ipcRenderer.invoke("mcp-server:update-exposed-prompts", exposedPrompts),
  clearMcpServerLogs: () => electron.ipcRenderer.invoke("mcp-server:clear-logs"),
  // Generic IPC invoke method for flexibility
  invoke: (channel, ...args) => electron.ipcRenderer.invoke(channel, ...args),
  // Events
  onOpenPreferences: (callback) => electron.ipcRenderer.on("open-preferences", callback),
  removeAllListeners: (channel) => electron.ipcRenderer.removeAllListeners(channel)
};
electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xuaW1wb3J0IHR5cGUgeyBFbGVjdHJvbkFQSSB9IGZyb20gJy4uL3NyYy90eXBlcydcblxuLy8gRXhwb3NlIHByb3RlY3RlZCBtZXRob2RzIHRoYXQgYWxsb3cgdGhlIHJlbmRlcmVyIHByb2Nlc3MgdG8gdXNlXG4vLyB0aGUgaXBjUmVuZGVyZXIgd2l0aG91dCBleHBvc2luZyB0aGUgZW50aXJlIG9iamVjdFxuY29uc3QgZWxlY3Ryb25BUEk6IEVsZWN0cm9uQVBJID0ge1xuICAvLyBQcm9tcHRzXG4gIGdldEFsbFByb21wdHM6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0LWFsbC1wcm9tcHRzJyksXG4gIGdldFByb21wdDogKGlkOiBudW1iZXIpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0LXByb21wdCcsIGlkKSxcbiAgY3JlYXRlUHJvbXB0OiAoZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGUtcHJvbXB0JywgZGF0YSksXG4gIHVwZGF0ZVByb21wdDogKGlkLCBkYXRhKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3VwZGF0ZS1wcm9tcHQnLCBpZCwgZGF0YSksXG4gIGRlbGV0ZVByb21wdDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1wcm9tcHQnLCBpZCksXG4gIHNlYXJjaFByb21wdHM6IChxdWVyeSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdzZWFyY2gtcHJvbXB0cycsIHF1ZXJ5KSxcbiAgZ2V0UHJvbXB0c0J5VGFnOiAodGFnKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1wcm9tcHRzLWJ5LXRhZycsIHRhZyksXG5cbiAgLy8gQ2F0ZWdvcmllc1xuICBnZXRBbGxDYXRlZ29yaWVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1hbGwtY2F0ZWdvcmllcycpLFxuICBjcmVhdGVDYXRlZ29yeTogKGRhdGEpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlLWNhdGVnb3J5JywgZGF0YSksXG4gIHVwZGF0ZUNhdGVnb3J5OiAoaWQsIGRhdGEpID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlLWNhdGVnb3J5JywgaWQsIGRhdGEpLFxuICBkZWxldGVDYXRlZ29yeTogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1jYXRlZ29yeScsIGlkKSxcblxuICAvLyBUZW1wbGF0ZXNcbiAgZ2V0QWxsVGVtcGxhdGVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1hbGwtdGVtcGxhdGVzJyksXG4gIGNyZWF0ZVRlbXBsYXRlOiAoZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGUtdGVtcGxhdGUnLCBkYXRhKSxcbiAgdXBkYXRlVGVtcGxhdGU6IChpZCwgZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd1cGRhdGUtdGVtcGxhdGUnLCBpZCwgZGF0YSksXG4gIGRlbGV0ZVRlbXBsYXRlOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlLXRlbXBsYXRlJywgaWQpLFxuICBnZW5lcmF0ZUZyb21UZW1wbGF0ZTogKHRlbXBsYXRlSWQsIHZhcmlhYmxlcykgPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2dlbmVyYXRlLWZyb20tdGVtcGxhdGUnLCB0ZW1wbGF0ZUlkLCB2YXJpYWJsZXMpLFxuXG4gIC8vIFRhZ3NcbiAgZ2V0QWxsVGFnczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQtYWxsLXRhZ3MnKSxcblxuICAvLyBWZXJzaW9uc1xuICBnZXRQcm9tcHRWZXJzaW9uczogKHByb21wdElkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1wcm9tcHQtdmVyc2lvbnMnLCBwcm9tcHRJZCksXG4gIGNyZWF0ZVByb21wdFZlcnNpb246IChwcm9tcHRJZCwgY29udGVudCkgPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2NyZWF0ZS1wcm9tcHQtdmVyc2lvbicsIHByb21wdElkLCBjb250ZW50KSxcblxuICAvLyBTZXR0aW5nc1xuICBnZXRTZXR0aW5nOiAoa2V5KSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1zZXR0aW5nJywga2V5KSxcbiAgc2V0U2V0dGluZzogKGtleSwgdmFsdWUpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnc2V0LXNldHRpbmcnLCBrZXksIHZhbHVlKSxcblxuICAvLyBJbXBvcnQvRXhwb3J0XG4gIGV4cG9ydFByb21wdHM6IChmb3JtYXQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZXhwb3J0LXByb21wdHMnLCBmb3JtYXQpLFxuICBpbXBvcnRQcm9tcHRzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2ltcG9ydC1wcm9tcHRzJyksXG5cbiAgLy8gVGVzdGluZ1xuICB0ZXN0UHJvbXB0OiAocmVxdWVzdCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd0ZXN0LXByb21wdCcsIHJlcXVlc3QpLFxuXG4gIC8vIFN5c3RlbVxuICBjb3B5VG9DbGlwYm9hcmQ6ICh0ZXh0KSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvcHktdG8tY2xpcGJvYXJkJywgdGV4dCksXG4gIHN3aXRjaE1vZGU6IChtb2RlKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3N3aXRjaC1tb2RlJywgbW9kZSksXG4gIGdldEN1cnJlbnRNb2RlOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1jdXJyZW50LW1vZGUnKSxcbiAgZmFjdG9yeVJlc2V0OiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2ZhY3RvcnktcmVzZXQnKSxcblxuICAvLyBNQ1AgU2VydmVyXG4gIHN0YXJ0TWNwU2VydmVyOiAoY29uZmlnLCBleHBvc2VkUHJvbXB0cykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdtY3Atc2VydmVyOnN0YXJ0JywgY29uZmlnLCBleHBvc2VkUHJvbXB0cyksXG4gIHN0b3BNY3BTZXJ2ZXI6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnbWNwLXNlcnZlcjpzdG9wJyksXG4gIGdldE1jcFNlcnZlclN0YXR1czogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdtY3Atc2VydmVyOnN0YXR1cycpLFxuICB1cGRhdGVNY3BTZXJ2ZXJDb25maWc6IChjb25maWcpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnbWNwLXNlcnZlcjp1cGRhdGUtY29uZmlnJywgY29uZmlnKSxcbiAgdXBkYXRlTWNwU2VydmVyRXhwb3NlZFByb21wdHM6IChleHBvc2VkUHJvbXB0cykgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdtY3Atc2VydmVyOnVwZGF0ZS1leHBvc2VkLXByb21wdHMnLCBleHBvc2VkUHJvbXB0cyksXG4gIGNsZWFyTWNwU2VydmVyTG9nczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdtY3Atc2VydmVyOmNsZWFyLWxvZ3MnKSxcblxuICAvLyBHZW5lcmljIElQQyBpbnZva2UgbWV0aG9kIGZvciBmbGV4aWJpbGl0eVxuICBpbnZva2U6IChjaGFubmVsOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoY2hhbm5lbCwgLi4uYXJncyksXG5cbiAgLy8gRXZlbnRzXG4gIG9uT3BlblByZWZlcmVuY2VzOiAoY2FsbGJhY2spID0+IGlwY1JlbmRlcmVyLm9uKCdvcGVuLXByZWZlcmVuY2VzJywgY2FsbGJhY2spLFxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IChjaGFubmVsKSA9PiBpcGNSZW5kZXJlci5yZW1vdmVBbGxMaXN0ZW5lcnMoY2hhbm5lbCksXG59XG5cbmNvbnRleHRCcmlkZ2UuZXhwb3NlSW5NYWluV29ybGQoJ2VsZWN0cm9uQVBJJywgZWxlY3Ryb25BUEkpIl0sIm5hbWVzIjpbImlwY1JlbmRlcmVyIiwiY29udGV4dEJyaWRnZSJdLCJtYXBwaW5ncyI6Ijs7QUFLQSxNQUFNLGNBQTJC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
