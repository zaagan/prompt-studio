"use strict";
const electron = require("electron");
const electronAPI = {
  // Prompts
  getAllPrompts: () => electron.ipcRenderer.invoke("get-all-prompts"),
  getPrompt: (id) => electron.ipcRenderer.invoke("get-prompt", id),
  createPrompt: (data) => electron.ipcRenderer.invoke("create-prompt", data),
  updatePrompt: (id, data) => electron.ipcRenderer.invoke("update-prompt", id, data),
  deletePrompt: (id) => electron.ipcRenderer.invoke("delete-prompt", id),
  searchPrompts: (query) => electron.ipcRenderer.invoke("search-prompts", query),
  getPromptsByTag: (tag) => electron.ipcRenderer.invoke("get-prompts-by-tag", tag),
  // Categories
  getAllCategories: () => electron.ipcRenderer.invoke("get-all-categories"),
  createCategory: (data) => electron.ipcRenderer.invoke("create-category", data),
  updateCategory: (id, data) => electron.ipcRenderer.invoke("update-category", id, data),
  deleteCategory: (id) => electron.ipcRenderer.invoke("delete-category", id),
  // Templates
  getAllTemplates: () => electron.ipcRenderer.invoke("get-all-templates"),
  createTemplate: (data) => electron.ipcRenderer.invoke("create-template", data),
  updateTemplate: (id, data) => electron.ipcRenderer.invoke("update-template", id, data),
  deleteTemplate: (id) => electron.ipcRenderer.invoke("delete-template", id),
  generateFromTemplate: (templateId, variables) => electron.ipcRenderer.invoke("generate-from-template", templateId, variables),
  // Tags
  getAllTags: () => electron.ipcRenderer.invoke("get-all-tags"),
  // Versions
  getPromptVersions: (promptId) => electron.ipcRenderer.invoke("get-prompt-versions", promptId),
  createPromptVersion: (promptId, content) => electron.ipcRenderer.invoke("create-prompt-version", promptId, content),
  // Settings
  getSetting: (key) => electron.ipcRenderer.invoke("get-setting", key),
  setSetting: (key, value) => electron.ipcRenderer.invoke("set-setting", key, value),
  // Import/Export
  exportPrompts: (format) => electron.ipcRenderer.invoke("export-prompts", format),
  importPrompts: () => electron.ipcRenderer.invoke("import-prompts"),
  // Testing
  testPrompt: (request) => electron.ipcRenderer.invoke("test-prompt", request),
  // System
  copyToClipboard: (text) => electron.ipcRenderer.invoke("copy-to-clipboard", text),
  switchMode: (mode) => electron.ipcRenderer.invoke("switch-mode", mode),
  getCurrentMode: () => electron.ipcRenderer.invoke("get-current-mode"),
  factoryReset: () => electron.ipcRenderer.invoke("factory-reset"),
  // Events
  onOpenPreferences: (callback) => electron.ipcRenderer.on("open-preferences", callback),
  removeAllListeners: (channel) => electron.ipcRenderer.removeAllListeners(channel)
};
electron.contextBridge.exposeInMainWorld("electronAPI", electronAPI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlbG9hZC5qcyIsInNvdXJjZXMiOlsiLi4vZWxlY3Ryb24vcHJlbG9hZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb250ZXh0QnJpZGdlLCBpcGNSZW5kZXJlciB9IGZyb20gJ2VsZWN0cm9uJ1xuaW1wb3J0IHR5cGUgeyBFbGVjdHJvbkFQSSB9IGZyb20gJy4uL3NyYy90eXBlcydcblxuLy8gRXhwb3NlIHByb3RlY3RlZCBtZXRob2RzIHRoYXQgYWxsb3cgdGhlIHJlbmRlcmVyIHByb2Nlc3MgdG8gdXNlXG4vLyB0aGUgaXBjUmVuZGVyZXIgd2l0aG91dCBleHBvc2luZyB0aGUgZW50aXJlIG9iamVjdFxuY29uc3QgZWxlY3Ryb25BUEk6IEVsZWN0cm9uQVBJID0ge1xuICAvLyBQcm9tcHRzXG4gIGdldEFsbFByb21wdHM6ICgpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0LWFsbC1wcm9tcHRzJyksXG4gIGdldFByb21wdDogKGlkOiBudW1iZXIpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZ2V0LXByb21wdCcsIGlkKSxcbiAgY3JlYXRlUHJvbXB0OiAoZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGUtcHJvbXB0JywgZGF0YSksXG4gIHVwZGF0ZVByb21wdDogKGlkLCBkYXRhKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3VwZGF0ZS1wcm9tcHQnLCBpZCwgZGF0YSksXG4gIGRlbGV0ZVByb21wdDogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1wcm9tcHQnLCBpZCksXG4gIHNlYXJjaFByb21wdHM6IChxdWVyeSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdzZWFyY2gtcHJvbXB0cycsIHF1ZXJ5KSxcbiAgZ2V0UHJvbXB0c0J5VGFnOiAodGFnKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1wcm9tcHRzLWJ5LXRhZycsIHRhZyksXG5cbiAgLy8gQ2F0ZWdvcmllc1xuICBnZXRBbGxDYXRlZ29yaWVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1hbGwtY2F0ZWdvcmllcycpLFxuICBjcmVhdGVDYXRlZ29yeTogKGRhdGEpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnY3JlYXRlLWNhdGVnb3J5JywgZGF0YSksXG4gIHVwZGF0ZUNhdGVnb3J5OiAoaWQsIGRhdGEpID0+IGlwY1JlbmRlcmVyLmludm9rZSgndXBkYXRlLWNhdGVnb3J5JywgaWQsIGRhdGEpLFxuICBkZWxldGVDYXRlZ29yeTogKGlkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2RlbGV0ZS1jYXRlZ29yeScsIGlkKSxcblxuICAvLyBUZW1wbGF0ZXNcbiAgZ2V0QWxsVGVtcGxhdGVzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1hbGwtdGVtcGxhdGVzJyksXG4gIGNyZWF0ZVRlbXBsYXRlOiAoZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdjcmVhdGUtdGVtcGxhdGUnLCBkYXRhKSxcbiAgdXBkYXRlVGVtcGxhdGU6IChpZCwgZGF0YSkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd1cGRhdGUtdGVtcGxhdGUnLCBpZCwgZGF0YSksXG4gIGRlbGV0ZVRlbXBsYXRlOiAoaWQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZGVsZXRlLXRlbXBsYXRlJywgaWQpLFxuICBnZW5lcmF0ZUZyb21UZW1wbGF0ZTogKHRlbXBsYXRlSWQsIHZhcmlhYmxlcykgPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2dlbmVyYXRlLWZyb20tdGVtcGxhdGUnLCB0ZW1wbGF0ZUlkLCB2YXJpYWJsZXMpLFxuXG4gIC8vIFRhZ3NcbiAgZ2V0QWxsVGFnczogKCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCdnZXQtYWxsLXRhZ3MnKSxcblxuICAvLyBWZXJzaW9uc1xuICBnZXRQcm9tcHRWZXJzaW9uczogKHByb21wdElkKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1wcm9tcHQtdmVyc2lvbnMnLCBwcm9tcHRJZCksXG4gIGNyZWF0ZVByb21wdFZlcnNpb246IChwcm9tcHRJZCwgY29udGVudCkgPT5cbiAgICBpcGNSZW5kZXJlci5pbnZva2UoJ2NyZWF0ZS1wcm9tcHQtdmVyc2lvbicsIHByb21wdElkLCBjb250ZW50KSxcblxuICAvLyBTZXR0aW5nc1xuICBnZXRTZXR0aW5nOiAoa2V5KSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1zZXR0aW5nJywga2V5KSxcbiAgc2V0U2V0dGluZzogKGtleSwgdmFsdWUpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnc2V0LXNldHRpbmcnLCBrZXksIHZhbHVlKSxcblxuICAvLyBJbXBvcnQvRXhwb3J0XG4gIGV4cG9ydFByb21wdHM6IChmb3JtYXQpID0+IGlwY1JlbmRlcmVyLmludm9rZSgnZXhwb3J0LXByb21wdHMnLCBmb3JtYXQpLFxuICBpbXBvcnRQcm9tcHRzOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2ltcG9ydC1wcm9tcHRzJyksXG5cbiAgLy8gVGVzdGluZ1xuICB0ZXN0UHJvbXB0OiAocmVxdWVzdCkgPT4gaXBjUmVuZGVyZXIuaW52b2tlKCd0ZXN0LXByb21wdCcsIHJlcXVlc3QpLFxuXG4gIC8vIFN5c3RlbVxuICBjb3B5VG9DbGlwYm9hcmQ6ICh0ZXh0KSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2NvcHktdG8tY2xpcGJvYXJkJywgdGV4dCksXG4gIHN3aXRjaE1vZGU6IChtb2RlKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ3N3aXRjaC1tb2RlJywgbW9kZSksXG4gIGdldEN1cnJlbnRNb2RlOiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2dldC1jdXJyZW50LW1vZGUnKSxcbiAgZmFjdG9yeVJlc2V0OiAoKSA9PiBpcGNSZW5kZXJlci5pbnZva2UoJ2ZhY3RvcnktcmVzZXQnKSxcblxuICAvLyBFdmVudHNcbiAgb25PcGVuUHJlZmVyZW5jZXM6IChjYWxsYmFjaykgPT4gaXBjUmVuZGVyZXIub24oJ29wZW4tcHJlZmVyZW5jZXMnLCBjYWxsYmFjayksXG4gIHJlbW92ZUFsbExpc3RlbmVyczogKGNoYW5uZWwpID0+IGlwY1JlbmRlcmVyLnJlbW92ZUFsbExpc3RlbmVycyhjaGFubmVsKSxcbn1cblxuY29udGV4dEJyaWRnZS5leHBvc2VJbk1haW5Xb3JsZCgnZWxlY3Ryb25BUEknLCBlbGVjdHJvbkFQSSkiXSwibmFtZXMiOlsiaXBjUmVuZGVyZXIiLCJjb250ZXh0QnJpZGdlIl0sIm1hcHBpbmdzIjoiOztBQUtBLE1BQU0sY0FBMkI7QUFBQTtBQUFBLEVBRS9CLGVBQWUsTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGlCQUFpQjtBQUFBLEVBQ3pELFdBQVcsQ0FBQyxPQUFlQSxTQUFBQSxZQUFZLE9BQU8sY0FBYyxFQUFFO0FBQUEsRUFDOUQsY0FBYyxDQUFDLFNBQVNBLFNBQUFBLFlBQVksT0FBTyxpQkFBaUIsSUFBSTtBQUFBLEVBQ2hFLGNBQWMsQ0FBQyxJQUFJLFNBQVNBLFNBQUFBLFlBQVksT0FBTyxpQkFBaUIsSUFBSSxJQUFJO0FBQUEsRUFDeEUsY0FBYyxDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxpQkFBaUIsRUFBRTtBQUFBLEVBQzVELGVBQWUsQ0FBQyxVQUFVQSxTQUFBQSxZQUFZLE9BQU8sa0JBQWtCLEtBQUs7QUFBQSxFQUNwRSxpQkFBaUIsQ0FBQyxRQUFRQSxTQUFBQSxZQUFZLE9BQU8sc0JBQXNCLEdBQUc7QUFBQTtBQUFBLEVBR3RFLGtCQUFrQixNQUFNQSxTQUFBQSxZQUFZLE9BQU8sb0JBQW9CO0FBQUEsRUFDL0QsZ0JBQWdCLENBQUMsU0FBU0EsU0FBQUEsWUFBWSxPQUFPLG1CQUFtQixJQUFJO0FBQUEsRUFDcEUsZ0JBQWdCLENBQUMsSUFBSSxTQUFTQSxTQUFBQSxZQUFZLE9BQU8sbUJBQW1CLElBQUksSUFBSTtBQUFBLEVBQzVFLGdCQUFnQixDQUFDLE9BQU9BLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsRUFBRTtBQUFBO0FBQUEsRUFHaEUsaUJBQWlCLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxtQkFBbUI7QUFBQSxFQUM3RCxnQkFBZ0IsQ0FBQyxTQUFTQSxTQUFBQSxZQUFZLE9BQU8sbUJBQW1CLElBQUk7QUFBQSxFQUNwRSxnQkFBZ0IsQ0FBQyxJQUFJLFNBQVNBLFNBQUFBLFlBQVksT0FBTyxtQkFBbUIsSUFBSSxJQUFJO0FBQUEsRUFDNUUsZ0JBQWdCLENBQUMsT0FBT0EsU0FBQUEsWUFBWSxPQUFPLG1CQUFtQixFQUFFO0FBQUEsRUFDaEUsc0JBQXNCLENBQUMsWUFBWSxjQUNqQ0EsU0FBQUEsWUFBWSxPQUFPLDBCQUEwQixZQUFZLFNBQVM7QUFBQTtBQUFBLEVBR3BFLFlBQVksTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGNBQWM7QUFBQTtBQUFBLEVBR25ELG1CQUFtQixDQUFDLGFBQWFBLFNBQUFBLFlBQVksT0FBTyx1QkFBdUIsUUFBUTtBQUFBLEVBQ25GLHFCQUFxQixDQUFDLFVBQVUsWUFDOUJBLFNBQUFBLFlBQVksT0FBTyx5QkFBeUIsVUFBVSxPQUFPO0FBQUE7QUFBQSxFQUcvRCxZQUFZLENBQUMsUUFBUUEsU0FBQUEsWUFBWSxPQUFPLGVBQWUsR0FBRztBQUFBLEVBQzFELFlBQVksQ0FBQyxLQUFLLFVBQVVBLFNBQUFBLFlBQVksT0FBTyxlQUFlLEtBQUssS0FBSztBQUFBO0FBQUEsRUFHeEUsZUFBZSxDQUFDLFdBQVdBLFNBQUFBLFlBQVksT0FBTyxrQkFBa0IsTUFBTTtBQUFBLEVBQ3RFLGVBQWUsTUFBTUEsU0FBQUEsWUFBWSxPQUFPLGdCQUFnQjtBQUFBO0FBQUEsRUFHeEQsWUFBWSxDQUFDLFlBQVlBLFNBQUFBLFlBQVksT0FBTyxlQUFlLE9BQU87QUFBQTtBQUFBLEVBR2xFLGlCQUFpQixDQUFDLFNBQVNBLFNBQUFBLFlBQVksT0FBTyxxQkFBcUIsSUFBSTtBQUFBLEVBQ3ZFLFlBQVksQ0FBQyxTQUFTQSxTQUFBQSxZQUFZLE9BQU8sZUFBZSxJQUFJO0FBQUEsRUFDNUQsZ0JBQWdCLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxrQkFBa0I7QUFBQSxFQUMzRCxjQUFjLE1BQU1BLFNBQUFBLFlBQVksT0FBTyxlQUFlO0FBQUE7QUFBQSxFQUd0RCxtQkFBbUIsQ0FBQyxhQUFhQSxTQUFBQSxZQUFZLEdBQUcsb0JBQW9CLFFBQVE7QUFBQSxFQUM1RSxvQkFBb0IsQ0FBQyxZQUFZQSxxQkFBWSxtQkFBbUIsT0FBTztBQUN6RTtBQUVBQyxTQUFBQSxjQUFjLGtCQUFrQixlQUFlLFdBQVc7In0=
